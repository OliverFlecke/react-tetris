{"version":3,"sources":["components/Board.module.scss","components/Pieces/Color.ts","components/Pieces/AbstractPiece.ts","components/Pieces/JPiece.ts","components/Pieces/IPiece.ts","components/Pieces/OPiece.ts","components/Pieces/Pieces.tsx","components/Board.tsx","components/Tetris.tsx","serviceWorker.ts","index.tsx","components/Pieces/Pieces.module.scss","components/Tetris.module.scss"],"names":["module","exports","container","gridContainer","visibleCell","hiddenCell","activeCell","Color","AbstractPiece","color","Object","classCallCheck","this","orientation","width","height","JPiece","_this","possibleConstructorReturn","getPrototypeOf","call","Silver","grid","column","row","length","newGrid","slice","setColumn","IPiece","Maroon","every","x","_this2","forEach","some","rotateClockwise","OPiece","NavyBlue","Piece","props","piece","react_default","a","createElement","Pieces_OPieceComponent","Pieces_IPieceComponent","assign","Pieces_JPieceComponent","pieceStyle","gridColumnStart","gridRowStart","OPieceComponent","className","styles","style","Array","fill","map","_","index","key","boardStyles","IPieceComponent","JPieceComponent","gridColumn","gridRow","Error","Grid","rowElements","xIndex","yIndex","concat","backgroundColor","borderColor","Overlay","id","initialColumn","_useState3","useState","_useState4","slicedToArray","setRow","_useState5","_useState6","_useState7","getRandomPiece","_useState8","setPiece","useEffect","setInterval","moveDown","clearInterval","amount","canMoveDown","console","debug","setTimeout","storePiece","log","speed","moveSideways","direction","checkLeft","checkRight","keyDownHandler","event","window","addEventListener","removeEventListener","Pieces","Board","_useState","_useState2","setGrid","Board_Grid","Board_Overlay","reduce","rows","newRows","unshift","push","checkRows","storeOnGrid","Tetris","components_Board","Boolean","location","hostname","match","ReactDOM","render","components_Tetris","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","IPieceHorizontal","IPieceVertical","JPieceHorizontal","JPieceVertical","title"],"mappings":"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","file":"static/js/main.8528f501.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Board_container__3YjH8\",\"gridContainer\":\"Board_gridContainer__225vc\",\"visibleCell\":\"Board_visibleCell__3E3tK\",\"hiddenCell\":\"Board_hiddenCell__3E4Yq\",\"activeCell\":\"Board_activeCell__2344E\"};","enum Color {\n  Red = 'red',\n  Cyan = 'cyan',\n\n  Maroon = '#AA0000',\n  Silver = '#C0C0C0',\n  Purple = '#AA00AA',\n  NavyBlue = '#0000AA',\n  DarkGreen = '#00AA00',\n  Brown = '#AA5500',\n  Teal = '#00AAAA',\n}\n\nexport default Color;\n","import { Direction, GridState } from '../Board';\nimport Color from './Color';\n\nexport default abstract class AbstractPiece {\n  public color: Color;\n  public orientation: string | undefined;\n  public width: number = 0;\n  public height: number = 0;\n\n  public constructor(color: Color) {\n    this.color = color;\n  }\n\n  public abstract canMoveDown(\n    grid: GridState,\n    column: number,\n    row: number,\n  ): boolean;\n\n  public abstract storeOnGrid(\n    grid: GridState,\n    column: number,\n    row: number,\n  ): GridState;\n\n  public abstract checkLeft(\n    grid: GridState,\n    column: number,\n    row: number,\n  ): boolean;\n\n  public abstract checkRight(\n    grid: GridState,\n    column: number,\n    row: number,\n  ): boolean;\n\n  public abstract rotateClockwise(\n    grid: GridState,\n    column: number,\n    row: number,\n    setColumn: (amount: number) => void,\n  ): void;\n  public abstract rotateCounterClockwise(\n    grid: GridState,\n    column: number,\n    row: number,\n    setColumn: (amount: number) => void,\n  ): void;\n}\n","import { GridState } from '../Board';\nimport AbstractPiece from './AbstractPiece';\nimport Color from './Color';\n\nexport default class JPiece extends AbstractPiece {\n  public orientation: 'Left' | 'Up' | 'Down' | 'Right' = 'Right';\n\n  public constructor() {\n    super(Color.Silver);\n  }\n\n  public canMoveDown(grid: GridState, column: number, row: number): boolean {\n    switch (this.orientation) {\n      case 'Down':\n        if (row + 2 > grid.length) {\n          return false;\n        }\n        if (\n          grid[row + 1][column + 1] !== null ||\n          grid[row][column] !== null ||\n          grid[row][column - 1] !== null ||\n          grid[row][column + 1] !== null\n        ) {\n          return false;\n        }\n        break;\n      case 'Left':\n        if (row + 3 > grid.length) {\n          return false;\n        }\n        if (grid[row + 2][column - 1] !== null || grid[row + 2][column]) {\n          return false;\n        }\n        break;\n\n      case 'Right':\n        if (row + 3 > grid.length) {\n          return false;\n        }\n        if (grid[row + 2][column - 1] !== null || grid[row][column] !== null) {\n          return false;\n        }\n        break;\n\n      case 'Up':\n        if (row + 2 > grid.length) {\n          return false;\n        }\n        if (\n          grid[row + 1][column] !== null ||\n          grid[row + 1][column + 1] !== null ||\n          grid[row + 1][column - 1] !== null\n        ) {\n          return false;\n        }\n        break;\n\n      default:\n        return true;\n    }\n\n    return true;\n  }\n  public storeOnGrid(grid: GridState, column: number, row: number): GridState {\n    const newGrid = grid.slice();\n\n    switch (this.orientation) {\n      case 'Down':\n        newGrid[row - 1][column - 1] = this.color;\n        newGrid[row - 1][column] = this.color;\n        newGrid[row - 1][column + 1] = this.color;\n        newGrid[row][column + 1] = this.color;\n        break;\n      case 'Left':\n        newGrid[row - 1][column] = this.color;\n        newGrid[row + 1][column] = this.color;\n        newGrid[row][column] = this.color;\n        newGrid[row + 1][column - 1] = this.color;\n        break;\n      case 'Right':\n        newGrid[row - 1][column] = this.color;\n        newGrid[row - 1][column - 1] = this.color;\n        newGrid[row][column - 1] = this.color;\n        newGrid[row + 1][column - 1] = this.color;\n        break;\n      case 'Up':\n        newGrid[row][column + 1] = this.color;\n        newGrid[row][column] = this.color;\n        newGrid[row][column - 1] = this.color;\n        newGrid[row - 1][column - 1] = this.color;\n        break;\n\n      default:\n        break;\n    }\n\n    return newGrid;\n  }\n\n  public checkLeft(grid: GridState, column: number, row: number): boolean {\n    switch (this.orientation) {\n      case 'Down':\n        return !(grid[row - 1][column - 2] !== null);\n      case 'Left':\n        return !(grid[row + 1][column - 2] !== null);\n      case 'Up':\n        return !(grid[row][column - 2] !== null || grid[row - 1][column - 2]);\n      case 'Right':\n        return !(\n          grid[row][column - 2] !== null ||\n          grid[row - 1][column - 2] !== null ||\n          grid[row + 1][column - 2] !== null\n        );\n\n      default:\n        return true;\n    }\n  }\n\n  public checkRight(grid: GridState, column: number, row: number): boolean {\n    switch (this.orientation) {\n      case 'Down':\n        if (column + 2 >= grid[0].length) {\n          return false;\n        }\n\n        return !(grid[row][column + 2] !== null || grid[row - 1][column + 2]);\n      case 'Left':\n        if (column + 1 >= grid[0].length) {\n          return false;\n        }\n\n        return !(\n          grid[row + 1][column + 1] !== null ||\n          grid[row][column + 1] !== null ||\n          grid[row - 1][column + 1] !== null\n        );\n      case 'Up':\n        if (column + 2 >= grid[0].length) {\n          return false;\n        }\n\n        return !(grid[row][column + 2] !== null);\n      case 'Right':\n        if (column + 1 >= grid[0].length) {\n          return false;\n        }\n\n        return !(\n          grid[row - 1][column + 1] !== null ||\n          grid[row][column] !== null ||\n          grid[row + 1][column] !== null\n        );\n      default:\n        return true;\n    }\n  }\n\n  public rotateClockwise(\n    grid: GridState,\n    column: number,\n    row: number,\n    setColumn: (amount: number) => void,\n  ): void {\n    switch (this.orientation) {\n      case 'Down':\n        this.orientation = 'Left';\n        break;\n      case 'Left':\n        this.orientation = 'Up';\n        break;\n      case 'Up':\n        this.orientation = 'Right';\n        break;\n      case 'Right':\n        this.orientation = 'Down';\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  public rotateCounterClockwise(\n    grid: GridState,\n    column: number,\n    row: number,\n    setColumn: (amount: number) => void,\n  ): void {\n    switch (this.orientation) {\n      case 'Down':\n        this.orientation = 'Right';\n        break;\n      case 'Right':\n        this.orientation = 'Up';\n        break;\n      case 'Up':\n        this.orientation = 'Left';\n        break;\n      case 'Left':\n        this.orientation = 'Down';\n        break;\n\n      default:\n        break;\n    }\n  }\n}\n","import { GridState } from '../Board';\nimport AbstractPiece from './AbstractPiece';\nimport Color from './Color';\n\nexport default class IPiece extends AbstractPiece {\n  public orientation: 'Horizontal' | 'Vertical' = 'Horizontal';\n\n  public constructor() {\n    super(Color.Maroon);\n    this.width = 4;\n    this.height = 1;\n  }\n\n  public canMoveDown(grid: GridState, column: number, row: number): boolean {\n    if (this.orientation === 'Horizontal') {\n      if (row + this.height > grid.length) {\n        return false;\n      }\n\n      return [-1, 0, 1, 2].every(\n        x => column + x >= grid[0].length || grid[row][column + x] === null,\n      );\n    } else if (this.orientation === 'Vertical') {\n      if (row + this.height >= grid.length) {\n        return false;\n      }\n\n      return grid[row + this.height][column - 1] === null;\n    }\n\n    return false;\n  }\n  public storeOnGrid(grid: GridState, column: number, row: number): GridState {\n    const newGrid = grid.slice();\n\n    if (this.orientation === 'Horizontal') {\n      [-1, 0, 1, 2].forEach(x => (newGrid[row - 1][column + x] = this.color));\n    } else if (this.orientation === 'Vertical') {\n      [0, 1, 2, 3].forEach(x => (newGrid[row + x][column - 1] = this.color));\n    }\n\n    return newGrid;\n  }\n\n  public checkLeft(grid: GridState, column: number, row: number): boolean {\n    if (this.orientation === 'Horizontal') {\n      if (grid[row][column - 2] !== null) {\n        return false;\n      }\n    }\n\n    if (this.orientation === 'Vertical') {\n      return ![0, 1, 2, 3].some(x => grid[row + x][column - 2] !== null);\n    }\n\n    return true;\n  }\n  public checkRight(grid: GridState, column: number, row: number): boolean {\n    if (this.orientation === 'Horizontal') {\n      if (grid[row][column + 3] !== null) {\n        return false;\n      }\n    }\n\n    if (this.orientation === 'Vertical') {\n      return ![0, 1, 2, 3].some(x => grid[row + x][column] !== null);\n    }\n\n    return true;\n  }\n\n  public rotateClockwise(grid: GridState, column: number, row: number) {\n    if (this.orientation === 'Vertical') {\n      if (column + 2 < grid[0].length) {\n        this.orientation = 'Horizontal';\n        this.width = 4;\n        this.height = 1;\n      }\n    } else {\n      this.width = 1;\n      this.height = 4;\n\n      this.orientation = 'Vertical';\n    }\n  }\n\n  public rotateCounterClockwise(grid: GridState, column: number, row: number) {\n    this.rotateClockwise(grid, column, row);\n  }\n}\n","import { GridState } from '../Board';\nimport AbstractPiece from './AbstractPiece';\nimport Color from './Color';\n\nexport default class OPiece extends AbstractPiece {\n  public constructor() {\n    super(Color.NavyBlue);\n    this.width = 2;\n  }\n\n  public canMoveDown(grid: GridState, column: number, row: number): boolean {\n    if (row + 1 >= grid.length) {\n      return false;\n    }\n\n    if (grid[row + 1][column] !== null || grid[row + 1][column - 1] !== null) {\n      return false;\n    }\n\n    return true;\n  }\n\n  public storeOnGrid(grid: GridState, column: number, row: number): GridState {\n    const newGrid = grid.slice();\n\n    newGrid[row][column] = this.color;\n    newGrid[row - 1][column] = this.color;\n    newGrid[row][column - 1] = this.color;\n    newGrid[row - 1][column - 1] = this.color;\n\n    return newGrid;\n  }\n\n  public checkLeft(grid: GridState, column: number, row: number): boolean {\n    if (grid[row][column - 2] !== null) {\n      return false;\n    }\n\n    return true;\n  }\n\n  public checkRight(grid: GridState, column: number, row: number): boolean {\n    if (grid[row][column + 1] !== null) {\n      return false;\n    }\n\n    return true;\n  }\n\n  public rotateClockwise() {\n    this.orientation = this.orientation;\n  }\n\n  public rotateCounterClockwise() {\n    this.orientation = this.orientation;\n  }\n}\n","import React, { CSSProperties } from 'react';\nimport * as boardStyles from '../Board.module.scss';\nimport AbstractPiece from './AbstractPiece';\nimport IPiece from './IPiece';\nimport JPiece from './JPiece';\nimport OPiece from './OPiece';\nimport * as styles from './Pieces.module.scss';\n\ninterface PieceProps {\n  piece: AbstractPiece;\n  column: number;\n  row: number;\n  direction: 0 | 1 | 2 | 3;\n}\n\nconst Piece = (props: PieceProps) => {\n  if (props.piece instanceof OPiece) {\n    return <OPieceComponent {...props} />;\n  }\n\n  if (props.piece instanceof IPiece) {\n    return <IPieceComponent {...props} orientation={props.piece.orientation} />;\n  }\n\n  if (props.piece instanceof JPiece) {\n    return <JPieceComponent {...props} orientation={props.piece.orientation} />;\n  }\n\n  return null;\n};\n\nexport default Piece;\n\nconst pieceStyle = (props: PieceProps): CSSProperties => ({\n  gridColumnStart: props.column,\n  gridRowStart: props.row,\n  // backgroundColor: props.piece.color,\n});\n\nconst OPieceComponent = (props: PieceProps) => {\n  return (\n    <div className={styles.OPiece} style={pieceStyle(props)}>\n      {new Array(4).fill(null).map((_, index) => (\n        <div key={index} className={boardStyles.activeCell} />\n      ))}\n    </div>\n  );\n};\n\ninterface IPieceComponentProps extends PieceProps {\n  orientation: 'Horizontal' | 'Vertical';\n}\n\nconst IPieceComponent = (props: IPieceComponentProps) => (\n  <div\n    className={\n      props.orientation === 'Horizontal'\n        ? styles.IPieceHorizontal\n        : styles.IPieceVertical\n    }\n    style={pieceStyle(props)}\n  >\n    {new Array(4).fill(null).map((_, index) => (\n      <div key={index} className={boardStyles.activeCell} />\n    ))}\n  </div>\n);\n\ninterface JPieceComponentProps extends PieceProps {\n  orientation: 'Left' | 'Right' | 'Up' | 'Down';\n}\n\nconst JPieceComponent = (props: JPieceComponentProps) => {\n  switch (props.orientation) {\n    case 'Down':\n      return (\n        <div className={styles.JPieceHorizontal} style={pieceStyle(props)}>\n          {new Array(3).fill(null).map((_, index) => (\n            <div key={index} className={boardStyles.activeCell} />\n          ))}\n          <div\n            className={boardStyles.activeCell}\n            style={{\n              gridColumn: 3,\n            }}\n          />\n        </div>\n      );\n\n    case 'Left':\n      return (\n        <div className={styles.JPieceVertical} style={pieceStyle(props)}>\n          <div\n            className={boardStyles.activeCell}\n            style={{\n              gridColumn: 1,\n              gridRow: 3,\n            }}\n          />\n          {new Array(3).fill(null).map((_, index) => (\n            <div\n              key={index}\n              className={boardStyles.activeCell}\n              style={{\n                gridColumn: 2,\n              }}\n            />\n          ))}\n        </div>\n      );\n\n    case 'Up':\n      return (\n        <div className={styles.JPieceHorizontal} style={pieceStyle(props)}>\n          <div\n            className={boardStyles.activeCell}\n            style={{\n              gridColumn: 1,\n              gridRow: 1,\n            }}\n          />\n          {new Array(3).fill(null).map((_, index) => (\n            <div\n              key={index}\n              className={boardStyles.activeCell}\n              style={{\n                gridRow: 2,\n              }}\n            />\n          ))}\n        </div>\n      );\n\n    case 'Right':\n      return (\n        <div className={styles.JPieceVertical} style={pieceStyle(props)}>\n          {new Array(3).fill(null).map((_, index) => (\n            <div\n              key={index}\n              className={boardStyles.activeCell}\n              style={{\n                gridColumn: 1,\n              }}\n            />\n          ))}\n          <div\n            className={boardStyles.activeCell}\n            style={{\n              gridColumn: 2,\n              gridRow: 1,\n            }}\n          />\n        </div>\n      );\n\n    default:\n      throw new Error('Unsupported orientation for JPiece');\n  }\n};\n","import React, { useEffect, useState } from 'react';\nimport * as styles from './Board.module.scss';\nimport AbstractPiece from './Pieces/AbstractPiece';\nimport Color from './Pieces/Color';\nimport IPiece from './Pieces/IPiece';\nimport JPiece from './Pieces/JPiece';\nimport Piece from './Pieces/Pieces';\n\nexport type Direction = 'Left' | 'Right';\n\nconst speed = 200;\n\ninterface BoardProps {\n  width: number;\n  height: number;\n}\n\nconst Board = (props: BoardProps) => {\n  const [grid, setGrid] = useState(\n    new Array(props.height)\n      .fill(null)\n      .map(() => new Array(props.width).fill(null)),\n  );\n\n  const storePiece = (\n    piece: AbstractPiece | null,\n    column: number,\n    row: number,\n  ) => {\n    if (piece === null) {\n      return;\n    }\n\n    setGrid(checkRows(piece.storeOnGrid(grid, column, row), props.width));\n  };\n\n  return (\n    <div className={styles.container}>\n      <Grid grid={grid} />\n      <Overlay {...props} grid={grid} storePiece={storePiece} />\n    </div>\n  );\n};\n\nexport type GridState = Array<Array<Color | null>>;\n\ninterface GridProps {\n  grid: GridState;\n}\n\nconst Grid = (props: GridProps) => {\n  return (\n    <div className={styles.gridContainer}>\n      {props.grid.map((rowElements: any[], xIndex: number) =>\n        rowElements.map((_: any[], yIndex: number) => {\n          const color = props.grid[xIndex][yIndex];\n\n          return (\n            <div\n              key={`${xIndex} ${yIndex}`}\n              className={styles.visibleCell}\n              style={{\n                backgroundColor: color ? color : '#555',\n                borderColor: color ? 'black' : 'white',\n              }}\n            />\n          );\n        }),\n      )}\n    </div>\n  );\n};\n\ninterface OverlayProps extends BoardProps {\n  storePiece: (\n    piece: AbstractPiece | null,\n    column: number,\n    row: number,\n  ) => void;\n  grid: GridState;\n}\n\nconst Overlay = (props: OverlayProps) => {\n  let id: NodeJS.Timeout;\n  const initialRow = 1;\n  const initialColumn = props.width / 2;\n\n  const [row, setRow] = useState(initialRow);\n  const [column, setColumn] = useState(initialColumn);\n  const [piece, setPiece] = useState<AbstractPiece | null>(getRandomPiece());\n\n  useEffect(() => {\n    if (piece !== null) {\n      id = setInterval(() => moveDown(1), speed);\n\n      return () => clearInterval(id);\n    }\n  }, [row, column]);\n\n  const newPiece = () => {\n    props.storePiece(piece, column, row);\n    setRow(initialRow);\n    setColumn(initialColumn);\n\n    if (\n      props.grid[initialRow][initialColumn] !== null ||\n      props.grid[initialRow][initialColumn - 1] !== null\n    ) {\n      console.log('Game over');\n      clearInterval(id);\n      setPiece(null);\n    } else {\n      setPiece(getRandomPiece());\n    }\n  };\n\n  const moveDown = (amount: number) => {\n    if (piece === null) {\n      return;\n    }\n\n    if (piece.canMoveDown(props.grid, column, row)) {\n      setRow(row + amount);\n    } else {\n      console.debug('Cant move down');\n      setTimeout(() => newPiece(), speed / 2);\n    }\n  };\n\n  const moveSideways = (direction: Direction) => {\n    if (piece === null) {\n      return;\n    }\n\n    if (\n      direction === 'Left' &&\n      column > 1 &&\n      piece.checkLeft(props.grid, column, row)\n    ) {\n      setColumn(column - 1);\n    } else if (\n      direction === 'Right' &&\n      column <= 10 - piece.width &&\n      piece.checkRight(props.grid, column, row)\n    ) {\n      setColumn(column + 1);\n    }\n  };\n\n  useEffect(() => {\n    const keyDownHandler = (event: KeyboardEvent) => {\n      switch (event.key) {\n        case 'ArrowUp':\n          if (piece) {\n            piece.rotateClockwise(props.grid, column, row, setColumn);\n          }\n          break;\n        case 'ArrowDown':\n          moveDown(1);\n          break;\n        case 'ArrowRight':\n          moveSideways('Right');\n          break;\n        case 'ArrowLeft':\n          moveSideways('Left');\n          break;\n        case ' ':\n          // moveDown(20);\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    window.addEventListener('keydown', keyDownHandler);\n\n    return () => window.removeEventListener('keydown', keyDownHandler);\n  });\n\n  return (\n    <div className={styles.gridContainer}>\n      {new Array(props.width * props.height).fill(null).map((_, index) => (\n        <div key={index} className={styles.hiddenCell} />\n      ))}\n      {piece ? (\n        <Piece row={row} column={column} direction={0} piece={piece} />\n      ) : null}\n    </div>\n  );\n};\n\nfunction checkRows(grid: GridState, width: number): GridState {\n  let rowsCleared = 0;\n\n  const newGrid = grid.reduce((rows: GridState, row: Array<Color | null>) => {\n    if (row.every(x => x !== null)) {\n      const newRows = rows.slice();\n      newRows.unshift(new Array(width).fill(null));\n      rowsCleared++;\n\n      return newRows;\n    } else {\n      rows.push(row);\n\n      return rows;\n    }\n  }, []);\n\n  return newGrid;\n}\n\nfunction getRandomPiece(): AbstractPiece {\n  return new JPiece();\n}\n\nexport default Board;\n","import React from 'react';\nimport Board from './Board';\nimport * as styles from './Tetris.module.scss';\n\nconst Tetris = () => (\n  <div className={styles.container}>\n    <h1 className={styles.title}>Tetris</h1>\n    <Board width={10} height={20} />\n  </div>\n);\n\nexport default Tetris;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Tetris from './components/Tetris';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Tetris />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"OPiece\":\"Pieces_OPiece__2GCiu\",\"IPieceHorizontal\":\"Pieces_IPieceHorizontal__1jyCq\",\"IPieceVertical\":\"Pieces_IPieceVertical__1qQZB\",\"JPieceHorizontal\":\"Pieces_JPieceHorizontal__3hNY1\",\"JPieceVertical\":\"Pieces_JPieceVertical__1kWYM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Tetris_container__30ESf\",\"title\":\"Tetris_title__2UrXg\"};"],"sourceRoot":""}